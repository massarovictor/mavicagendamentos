import { emailService } from './emailService';
import { EmailTemplates, EmailNotificationData } from './emailTemplates';
import { Agendamento, Usuario, Espaco, NumeroAula } from '@/types';

export class NotificationService {
  /**
   * Notifica o gestor sobre uma nova solicita√ß√£o de agendamento
   */
  static async notificarGestorNovaSolicitacao(
    agendamento: Agendamento,
    usuario: Usuario,
    espaco: Espaco,
    gestor: Usuario
  ): Promise<boolean> {
    try {
      const emailData: EmailNotificationData = {
        usuarioNome: usuario.nome,
        usuarioEmail: usuario.email,
        gestorNome: gestor.nome,
        gestorEmail: gestor.email,
        espacoNome: espaco.nome,
        data: agendamento.data,
        aulaInicio: agendamento.aulaInicio as NumeroAula,
        aulaFim: agendamento.aulaFim as NumeroAula,
        observacoes: agendamento.observacoes
      };

      const { subject, message } = EmailTemplates.novaSolicitacao(emailData);
      
      const sucesso = await emailService.sendSimpleEmail(gestor.email, subject, message, 'nova_solicitacao');
      
      if (sucesso) {
        console.log(`‚úÖ Notifica√ß√£o enviada para gestor: ${gestor.email} sobre solicita√ß√£o de ${usuario.nome}`);
      } else {
        console.error(`‚ùå Falha ao enviar notifica√ß√£o para gestor: ${gestor.email}`);
      }
      
      return sucesso;
    } catch (error) {
      console.error('Erro ao notificar gestor sobre nova solicita√ß√£o:', error);
      return false;
    }
  }

  /**
   * Notifica o usu√°rio sobre aprova√ß√£o do agendamento
   */
  static async notificarUsuarioAprovacao(
    agendamento: Agendamento,
    usuario: Usuario,
    espaco: Espaco,
    gestor: Usuario
  ): Promise<boolean> {
    try {
      const emailData: EmailNotificationData = {
        usuarioNome: usuario.nome,
        usuarioEmail: usuario.email,
        gestorNome: gestor.nome,
        gestorEmail: gestor.email,
        espacoNome: espaco.nome,
        data: agendamento.data,
        aulaInicio: agendamento.aulaInicio as NumeroAula,
        aulaFim: agendamento.aulaFim as NumeroAula,
        observacoes: agendamento.observacoes
      };

      const { subject, message } = EmailTemplates.agendamentoAprovado(emailData);
      
      const sucesso = await emailService.sendSimpleEmail(usuario.email, subject, message, 'aprovacao');
      
      if (sucesso) {
        console.log(`‚úÖ Notifica√ß√£o de aprova√ß√£o enviada para: ${usuario.email}`);
      } else {
        console.error(`‚ùå Falha ao enviar notifica√ß√£o de aprova√ß√£o para: ${usuario.email}`);
      }
      
      return sucesso;
    } catch (error) {
      console.error('Erro ao notificar usu√°rio sobre aprova√ß√£o:', error);
      return false;
    }
  }

  /**
   * Notifica o usu√°rio sobre rejei√ß√£o do agendamento
   */
  static async notificarUsuarioRejeicao(
    agendamento: Agendamento,
    usuario: Usuario,
    espaco: Espaco,
    gestor: Usuario
  ): Promise<boolean> {
    try {
      const emailData: EmailNotificationData = {
        usuarioNome: usuario.nome,
        usuarioEmail: usuario.email,
        gestorNome: gestor.nome,
        gestorEmail: gestor.email,
        espacoNome: espaco.nome,
        data: agendamento.data,
        aulaInicio: agendamento.aulaInicio as NumeroAula,
        aulaFim: agendamento.aulaFim as NumeroAula,
        observacoes: agendamento.observacoes
      };

      const { subject, message } = EmailTemplates.agendamentoRejeitado(emailData);
      
      const sucesso = await emailService.sendSimpleEmail(usuario.email, subject, message, 'rejeicao');
      
      if (sucesso) {
        console.log(`‚úÖ Notifica√ß√£o de rejei√ß√£o enviada para: ${usuario.email}`);
      } else {
        console.error(`‚ùå Falha ao enviar notifica√ß√£o de rejei√ß√£o para: ${usuario.email}`);
      }
      
      return sucesso;
    } catch (error) {
      console.error('Erro ao notificar usu√°rio sobre rejei√ß√£o:', error);
      return false;
    }
  }

  /**
   * SOLU√á√ÉO DEFINITIVA: Encontra APENAS os gestores respons√°veis por um espa√ßo
   * REGRA CLARA: Administradores N√ÉO recebem notifica√ß√µes como gestores
   */
  static findGestoresDoEspaco(espacoId: number, usuarios: Usuario[]): Usuario[] {
    // IMPORTANTE: Filtrar APENAS gestores (tipo === 'gestor')
    // Administradores t√™m poder de aprovar tudo, mas N√ÉO devem receber emails
    const gestores = usuarios.filter(usuario => 
      usuario.tipo === 'gestor' && // APENAS gestores
      usuario.ativo === true && // APENAS ativos
      usuario.espacos?.includes(espacoId) // APENAS do espa√ßo espec√≠fico
    );

    console.log(`üîç Buscando gestores para espa√ßo ${espacoId}:`);
    console.log(`   - Total de usu√°rios no sistema: ${usuarios.length}`);
    console.log(`   - Gestores encontrados: ${gestores.length}`);
    
    if (gestores.length > 0) {
      gestores.forEach(g => {
        console.log(`   ‚úÖ ${g.nome} (${g.email}) - Gestor do espa√ßo ${espacoId}`);
      });
    } else {
      console.log(`   ‚ö†Ô∏è NENHUM gestor encontrado para o espa√ßo ${espacoId}`);
      
      // Listar admins para informa√ß√£o (mas N√ÉO inclu√≠-los)
      const admins = usuarios.filter(u => u.tipo === 'admin');
      if (admins.length > 0) {
        console.log(`   ‚ÑπÔ∏è Admins no sistema (N√ÉO receber√£o notifica√ß√£o):`);
        admins.forEach(a => {
          console.log(`      - ${a.nome} (${a.email})`);
        });
      }
    }

    return gestores;
  }

  /**
   * Notifica todos os gestores de um espa√ßo sobre nova solicita√ß√£o
   * N√ÉO notifica administradores
   */
  static async notificarTodosGestores(
    agendamento: Agendamento,
    usuario: Usuario,
    espaco: Espaco,
    usuarios: Usuario[]
  ): Promise<boolean> {
    console.log('\nüìß INICIANDO PROCESSO DE NOTIFICA√á√ÉO');
    console.log(`   Espa√ßo: ${espaco.nome} (ID: ${agendamento.espacoId})`);
    console.log(`   Solicitante: ${usuario.nome} (${usuario.email})`);
    
    // Usar a fun√ß√£o definitiva que exclui admins
    const gestores = this.findGestoresDoEspaco(agendamento.espacoId, usuarios);
    
    if (gestores.length === 0) {
      console.warn(`‚ö†Ô∏è ATEN√á√ÉO: Nenhum gestor encontrado para o espa√ßo "${espaco.nome}"`);
      console.log(`üí° SOLU√á√ÉO: Execute o script 'analise_usuarios_espacos.sql' no Supabase para verificar`);
      console.log(`            e atribuir gestores aos espa√ßos sem respons√°veis.`);
      return false;
    }

    console.log(`\nüì® Enviando notifica√ß√µes para ${gestores.length} gestor(es)...`);
    
    const resultados = await Promise.all(
      gestores.map(gestor => 
        this.notificarGestorNovaSolicitacao(agendamento, usuario, espaco, gestor)
      )
    );

    const sucessos = resultados.filter(Boolean).length;
    const falhas = resultados.length - sucessos;

    console.log(`\nüìä RESULTADO FINAL:`);
    console.log(`   ‚úÖ Sucesso: ${sucessos} notifica√ß√£o(√µes)`);
    if (falhas > 0) {
      console.log(`   ‚ùå Falhas: ${falhas} notifica√ß√£o(√µes)`);
    }
    console.log(`   üìç Espa√ßo: ${espaco.nome}`);
    console.log('   ‚ú® Processo conclu√≠do\n');
    
    return sucessos > 0; // Retorna true se pelo menos uma notifica√ß√£o foi enviada
  }

  /**
   * Testa a conectividade do servi√ßo de email
   */
  static async testarConexao(): Promise<boolean> {
    return await emailService.verifyConnection();
  }
} 