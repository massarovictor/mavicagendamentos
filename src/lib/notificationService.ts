import { emailService } from './emailService';
import { EmailTemplates, EmailNotificationData } from './emailTemplates';
import { Agendamento, Usuario, Espaco, NumeroAula } from '@/types';
import { notificationLog, debug } from '@/utils/logger';

export class NotificationService {
  /**
   * Notifica o gestor sobre uma nova solicita√ß√£o de agendamento
   */
  static async notificarGestorNovaSolicitacao(
    agendamento: Agendamento,
    usuario: Usuario,
    espaco: Espaco,
    gestor: Usuario
  ): Promise<boolean> {
    try {
      const emailData: EmailNotificationData = {
        usuarioNome: usuario.nome,
        usuarioEmail: usuario.email,
        gestorNome: gestor.nome,
        gestorEmail: gestor.email,
        espacoNome: espaco.nome,
        data: agendamento.data,
        aulaInicio: agendamento.aulaInicio as NumeroAula,
        aulaFim: agendamento.aulaFim as NumeroAula,
        observacoes: agendamento.observacoes
      };

      const { subject, message } = EmailTemplates.novaSolicitacao(emailData);
      
      const sucesso = await emailService.sendSimpleEmail(gestor.email, subject, message, 'nova_solicitacao');
      
      if (sucesso) {
        notificationLog('üìß Email enviado para gestor');
      } else {
        console.error(`‚ùå Falha ao enviar notifica√ß√£o para gestor: ${gestor.email}`);
      }
      
      return sucesso;
    } catch (error) {
      console.error('Erro ao notificar gestor sobre nova solicita√ß√£o:', error);
      return false;
    }
  }

  /**
   * Notifica o usu√°rio sobre aprova√ß√£o do agendamento
   */
  static async notificarUsuarioAprovacao(
    agendamento: Agendamento,
    usuario: Usuario,
    espaco: Espaco,
    gestor: Usuario
  ): Promise<boolean> {
    try {
      const emailData: EmailNotificationData = {
        usuarioNome: usuario.nome,
        usuarioEmail: usuario.email,
        gestorNome: gestor.nome,
        gestorEmail: gestor.email,
        espacoNome: espaco.nome,
        data: agendamento.data,
        aulaInicio: agendamento.aulaInicio as NumeroAula,
        aulaFim: agendamento.aulaFim as NumeroAula,
        observacoes: agendamento.observacoes
      };

      const { subject, message } = EmailTemplates.agendamentoAprovado(emailData);
      
      const sucesso = await emailService.sendSimpleEmail(usuario.email, subject, message, 'aprovacao');
      
      if (sucesso) {
        notificationLog('Notifica√ß√£o de aprova√ß√£o enviada');
      } else {
        console.error(`‚ùå Falha ao enviar notifica√ß√£o de aprova√ß√£o para: ${usuario.email}`);
      }
      
      return sucesso;
    } catch (error) {
      console.error('Erro ao notificar usu√°rio sobre aprova√ß√£o:', error);
      return false;
    }
  }

  /**
   * Notifica o usu√°rio sobre rejei√ß√£o do agendamento
   */
  static async notificarUsuarioRejeicao(
    agendamento: Agendamento,
    usuario: Usuario,
    espaco: Espaco,
    gestor: Usuario
  ): Promise<boolean> {
    try {
      const emailData: EmailNotificationData = {
        usuarioNome: usuario.nome,
        usuarioEmail: usuario.email,
        gestorNome: gestor.nome,
        gestorEmail: gestor.email,
        espacoNome: espaco.nome,
        data: agendamento.data,
        aulaInicio: agendamento.aulaInicio as NumeroAula,
        aulaFim: agendamento.aulaFim as NumeroAula,
        observacoes: agendamento.observacoes
      };

      const { subject, message } = EmailTemplates.agendamentoRejeitado(emailData);
      
      const sucesso = await emailService.sendSimpleEmail(usuario.email, subject, message, 'rejeicao');
      
      if (sucesso) {
        notificationLog('Notifica√ß√£o de rejei√ß√£o enviada');
      } else {
        console.error(`‚ùå Falha ao enviar notifica√ß√£o de rejei√ß√£o para: ${usuario.email}`);
      }
      
      return sucesso;
    } catch (error) {
      console.error('Erro ao notificar usu√°rio sobre rejei√ß√£o:', error);
      return false;
    }
  }

  /**
   * SOLU√á√ÉO DEFINITIVA: Encontra APENAS os gestores respons√°veis por um espa√ßo
   * REGRA CLARA: Administradores N√ÉO recebem notifica√ß√µes como gestores
   */
  static findGestoresDoEspaco(espacoId: number, usuarios: Usuario[]): Usuario[] {
    // IMPORTANTE: Filtrar APENAS gestores (tipo === 'gestor')
    // Administradores t√™m poder de aprovar tudo, mas N√ÉO devem receber emails
    const gestores = usuarios.filter(usuario => 
      usuario.tipo === 'gestor' && // APENAS gestores
      usuario.ativo === true && // APENAS ativos
      usuario.espacos?.includes(espacoId) // APENAS do espa√ßo espec√≠fico
    );

    // Log apenas em desenvolvimento, sem dados sens√≠veis
    debug('Buscando gestores para espa√ßo', { gestoresEncontrados: gestores.length });

    return gestores;
  }

  /**
   * Notifica todos os gestores de um espa√ßo sobre nova solicita√ß√£o
   * N√ÉO notifica administradores
   */
  static async notificarTodosGestores(
    agendamento: Agendamento,
    usuario: Usuario,
    espaco: Espaco,
    usuarios: Usuario[]
  ): Promise<boolean> {
    notificationLog('üöÄ Iniciando envio de notifica√ß√µes por email');
    
    // Usar a fun√ß√£o definitiva que exclui admins
    const gestores = this.findGestoresDoEspaco(agendamento.espacoId, usuarios);
    
    if (gestores.length === 0) {
      debug('Nenhum gestor encontrado para espa√ßo');
      return false;
    }

    debug('Enviando notifica√ß√µes');
    
    const resultados = await Promise.all(
      gestores.map(gestor => 
        this.notificarGestorNovaSolicitacao(agendamento, usuario, espaco, gestor)
      )
    );

    const sucessos = resultados.filter(Boolean).length;
    const falhas = resultados.length - sucessos;

    notificationLog('‚úÖ Notifica√ß√µes enviadas com sucesso!');
    
    return sucessos > 0; // Retorna true se pelo menos uma notifica√ß√£o foi enviada
  }

  /**
   * Testa a conectividade do servi√ßo de email
   */
  static async testarConexao(): Promise<boolean> {
    return await emailService.verifyConnection();
  }
} 